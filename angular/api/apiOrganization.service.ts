/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AccessPointDetailInOrganizationDTO } from '../model/accessPointDetailInOrganizationDTO';
import { AccessPointNewDTO } from '../model/accessPointNewDTO';
import { MonitoringAccessPointWizardDTO } from '../model/monitoringAccessPointWizardDTO';
import { Organization } from '../model/organization';
import { OrganizationDTO } from '../model/organizationDTO';
import { OrganizationShortDTO } from '../model/organizationShortDTO';
import { PageOrganizationWithAccessPointsDTO } from '../model/pageOrganizationWithAccessPointsDTO';
import { PaginatedListReportOrganizationDTO } from '../model/paginatedListReportOrganizationDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ApiOrganizationService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * apsByOrganization
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apsByOrganizationUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<AccessPointDetailInOrganizationDTO>>;
    public apsByOrganizationUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AccessPointDetailInOrganizationDTO>>>;
    public apsByOrganizationUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AccessPointDetailInOrganizationDTO>>>;
    public apsByOrganizationUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apsByOrganizationUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<AccessPointDetailInOrganizationDTO>>(`${this.basePath}/api/organization/${encodeURIComponent(String(id))}/ap/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * base
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public baseUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<Array<Organization>>;
    public baseUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Organization>>>;
    public baseUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Organization>>>;
    public baseUsingGET1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Organization>>(`${this.basePath}/api/organization/base/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * countByLocationId
     * 
     * @param locationId locationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countByLocationIdUsingGET(locationId: number, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public countByLocationIdUsingGET(locationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public countByLocationIdUsingGET(locationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public countByLocationIdUsingGET(locationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling countByLocationIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<number>(`${this.basePath}/api/organization/${encodeURIComponent(String(locationId))}/count`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createAP
     * 
     * @param dto dto
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAPUsingPOST(dto: AccessPointNewDTO, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createAPUsingPOST(dto: AccessPointNewDTO, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createAPUsingPOST(dto: AccessPointNewDTO, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createAPUsingPOST(dto: AccessPointNewDTO, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (dto === null || dto === undefined) {
            throw new Error('Required parameter dto was null or undefined when calling createAPUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createAPUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/organization/${encodeURIComponent(String(id))}/ap/`,
            dto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createItem
     * 
     * @param value value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createItemUsingPOST(value: OrganizationShortDTO, observe?: 'body', reportProgress?: boolean): Observable<OrganizationShortDTO>;
    public createItemUsingPOST(value: OrganizationShortDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganizationShortDTO>>;
    public createItemUsingPOST(value: OrganizationShortDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganizationShortDTO>>;
    public createItemUsingPOST(value: OrganizationShortDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling createItemUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<OrganizationShortDTO>(`${this.basePath}/api/organization/`,
            value,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * initMonitoring
     * 
     * @param apid apid
     * @param id id
     * @param wizard wizard
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initMonitoringUsingPOST(apid: number, id: number, wizard: MonitoringAccessPointWizardDTO, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public initMonitoringUsingPOST(apid: number, id: number, wizard: MonitoringAccessPointWizardDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public initMonitoringUsingPOST(apid: number, id: number, wizard: MonitoringAccessPointWizardDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public initMonitoringUsingPOST(apid: number, id: number, wizard: MonitoringAccessPointWizardDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (apid === null || apid === undefined) {
            throw new Error('Required parameter apid was null or undefined when calling initMonitoringUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling initMonitoringUsingPOST.');
        }

        if (wizard === null || wizard === undefined) {
            throw new Error('Required parameter wizard was null or undefined when calling initMonitoringUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/api/organization/${encodeURIComponent(String(id))}/ap/${encodeURIComponent(String(apid))}/init-monitoring`,
            wizard,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * item
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public itemUsingGET2(id: number, observe?: 'body', reportProgress?: boolean): Observable<OrganizationDTO>;
    public itemUsingGET2(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganizationDTO>>;
    public itemUsingGET2(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganizationDTO>>;
    public itemUsingGET2(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling itemUsingGET2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<OrganizationDTO>(`${this.basePath}/api/organization/${encodeURIComponent(String(id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listByLocationIdWithoutAccessPoint
     * 
     * @param accessPoint accessPoint
     * @param location location
     * @param offset 
     * @param paged 
     * @param pageNumber 
     * @param pageSize 
     * @param sortSorted 
     * @param sortUnsorted 
     * @param unpaged 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listByLocationIdWithoutAccessPointUsingGET(accessPoint: string, location: string, offset?: number, paged?: boolean, pageNumber?: number, pageSize?: number, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, observe?: 'body', reportProgress?: boolean): Observable<PageOrganizationWithAccessPointsDTO>;
    public listByLocationIdWithoutAccessPointUsingGET(accessPoint: string, location: string, offset?: number, paged?: boolean, pageNumber?: number, pageSize?: number, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageOrganizationWithAccessPointsDTO>>;
    public listByLocationIdWithoutAccessPointUsingGET(accessPoint: string, location: string, offset?: number, paged?: boolean, pageNumber?: number, pageSize?: number, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageOrganizationWithAccessPointsDTO>>;
    public listByLocationIdWithoutAccessPointUsingGET(accessPoint: string, location: string, offset?: number, paged?: boolean, pageNumber?: number, pageSize?: number, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (accessPoint === null || accessPoint === undefined) {
            throw new Error('Required parameter accessPoint was null or undefined when calling listByLocationIdWithoutAccessPointUsingGET.');
        }

        if (location === null || location === undefined) {
            throw new Error('Required parameter location was null or undefined when calling listByLocationIdWithoutAccessPointUsingGET.');
        }








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (accessPoint !== undefined && accessPoint !== null) {
            queryParameters = queryParameters.set('accessPoint', <any>accessPoint);
        }
        if (location !== undefined && location !== null) {
            queryParameters = queryParameters.set('location', <any>location);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (paged !== undefined && paged !== null) {
            queryParameters = queryParameters.set('paged', <any>paged);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sortSorted !== undefined && sortSorted !== null) {
            queryParameters = queryParameters.set('sort.sorted', <any>sortSorted);
        }
        if (sortUnsorted !== undefined && sortUnsorted !== null) {
            queryParameters = queryParameters.set('sort.unsorted', <any>sortUnsorted);
        }
        if (unpaged !== undefined && unpaged !== null) {
            queryParameters = queryParameters.set('unpaged', <any>unpaged);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageOrganizationWithAccessPointsDTO>(`${this.basePath}/api/organization/without-ap`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * list
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listUsingGET8(observe?: 'body', reportProgress?: boolean): Observable<Array<Organization>>;
    public listUsingGET8(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Organization>>>;
    public listUsingGET8(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Organization>>>;
    public listUsingGET8(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Organization>>(`${this.basePath}/api/organization`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * remove
     * 
     * @param locationId locationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeUsingDELETE(locationId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeUsingDELETE(locationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeUsingDELETE(locationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeUsingDELETE(locationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling removeUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/organization/${encodeURIComponent(String(locationId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * reportAll
     * 
     * @param page page
     * @param size size
     * @param location location
     * @param organization organization
     * @param parents parents
     * @param populationEnd population-end
     * @param populationStart population-start
     * @param smo smo
     * @param sort sort
     * @param type type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportAllUsingGET(page: number, size: number, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginatedListReportOrganizationDTO>;
    public reportAllUsingGET(page: number, size: number, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginatedListReportOrganizationDTO>>;
    public reportAllUsingGET(page: number, size: number, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginatedListReportOrganizationDTO>>;
    public reportAllUsingGET(page: number, size: number, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling reportAllUsingGET.');
        }

        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling reportAllUsingGET.');
        }









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (location !== undefined && location !== null) {
            queryParameters = queryParameters.set('location', <any>location);
        }
        if (organization !== undefined && organization !== null) {
            queryParameters = queryParameters.set('organization', <any>organization);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (parents !== undefined && parents !== null) {
            queryParameters = queryParameters.set('parents', <any>parents);
        }
        if (populationEnd !== undefined && populationEnd !== null) {
            queryParameters = queryParameters.set('population-end', <any>populationEnd);
        }
        if (populationStart !== undefined && populationStart !== null) {
            queryParameters = queryParameters.set('population-start', <any>populationStart);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (smo !== undefined && smo !== null) {
            queryParameters = queryParameters.set('smo', <any>smo);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PaginatedListReportOrganizationDTO>(`${this.basePath}/api/organization/report/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAP
     * 
     * @param dto dto
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAPUsingPUT(dto: AccessPointNewDTO, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAPUsingPUT(dto: AccessPointNewDTO, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAPUsingPUT(dto: AccessPointNewDTO, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAPUsingPUT(dto: AccessPointNewDTO, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (dto === null || dto === undefined) {
            throw new Error('Required parameter dto was null or undefined when calling updateAPUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAPUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/organization/${encodeURIComponent(String(id))}/ap/`,
            dto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateOrganization
     * 
     * @param id id
     * @param value value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateOrganizationUsingPUT(id: string, value: OrganizationShortDTO, observe?: 'body', reportProgress?: boolean): Observable<OrganizationDTO>;
    public updateOrganizationUsingPUT(id: string, value: OrganizationShortDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganizationDTO>>;
    public updateOrganizationUsingPUT(id: string, value: OrganizationShortDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganizationDTO>>;
    public updateOrganizationUsingPUT(id: string, value: OrganizationShortDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateOrganizationUsingPUT.');
        }

        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling updateOrganizationUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<OrganizationDTO>(`${this.basePath}/api/organization/${encodeURIComponent(String(id))}`,
            value,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
