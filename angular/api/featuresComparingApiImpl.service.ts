/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ByteArrayResource } from '../model/byteArrayResource';
import { PageLocationFC } from '../model/pageLocationFC';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FeaturesComparingApiImplService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * locations
     * 
     * @param type type
     * @param connectionTypes connectionTypes
     * @param govProgram govProgram
     * @param govProgramYear govProgramYear
     * @param locationName locationName
     * @param offset 
     * @param operators operators
     * @param paged 
     * @param pageNumber 
     * @param pageSize 
     * @param parents parents
     * @param sortSorted 
     * @param sortUnsorted 
     * @param unpaged 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public locationsUsingGET2(type: 'ATS' | 'INET' | 'INFOMAT' | 'MOBILE' | 'PAYPHONE' | 'POST' | 'RADIO' | 'TV', connectionTypes?: Array<number>, govProgram?: number, govProgramYear?: number, locationName?: string, offset?: number, operators?: Array<number>, paged?: boolean, pageNumber?: number, pageSize?: number, parents?: Array<number>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, observe?: 'body', reportProgress?: boolean): Observable<PageLocationFC>;
    public locationsUsingGET2(type: 'ATS' | 'INET' | 'INFOMAT' | 'MOBILE' | 'PAYPHONE' | 'POST' | 'RADIO' | 'TV', connectionTypes?: Array<number>, govProgram?: number, govProgramYear?: number, locationName?: string, offset?: number, operators?: Array<number>, paged?: boolean, pageNumber?: number, pageSize?: number, parents?: Array<number>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageLocationFC>>;
    public locationsUsingGET2(type: 'ATS' | 'INET' | 'INFOMAT' | 'MOBILE' | 'PAYPHONE' | 'POST' | 'RADIO' | 'TV', connectionTypes?: Array<number>, govProgram?: number, govProgramYear?: number, locationName?: string, offset?: number, operators?: Array<number>, paged?: boolean, pageNumber?: number, pageSize?: number, parents?: Array<number>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageLocationFC>>;
    public locationsUsingGET2(type: 'ATS' | 'INET' | 'INFOMAT' | 'MOBILE' | 'PAYPHONE' | 'POST' | 'RADIO' | 'TV', connectionTypes?: Array<number>, govProgram?: number, govProgramYear?: number, locationName?: string, offset?: number, operators?: Array<number>, paged?: boolean, pageNumber?: number, pageSize?: number, parents?: Array<number>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling locationsUsingGET2.');
        }














        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (connectionTypes) {
            connectionTypes.forEach((element) => {
                queryParameters = queryParameters.append('connectionTypes', <any>element);
            })
        }
        if (govProgram !== undefined && govProgram !== null) {
            queryParameters = queryParameters.set('govProgram', <any>govProgram);
        }
        if (govProgramYear !== undefined && govProgramYear !== null) {
            queryParameters = queryParameters.set('govProgramYear', <any>govProgramYear);
        }
        if (locationName !== undefined && locationName !== null) {
            queryParameters = queryParameters.set('locationName', <any>locationName);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (operators) {
            operators.forEach((element) => {
                queryParameters = queryParameters.append('operators', <any>element);
            })
        }
        if (paged !== undefined && paged !== null) {
            queryParameters = queryParameters.set('paged', <any>paged);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (parents) {
            parents.forEach((element) => {
                queryParameters = queryParameters.append('parents', <any>element);
            })
        }
        if (sortSorted !== undefined && sortSorted !== null) {
            queryParameters = queryParameters.set('sort.sorted', <any>sortSorted);
        }
        if (sortUnsorted !== undefined && sortUnsorted !== null) {
            queryParameters = queryParameters.set('sort.unsorted', <any>sortUnsorted);
        }
        if (unpaged !== undefined && unpaged !== null) {
            queryParameters = queryParameters.set('unpaged', <any>unpaged);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageLocationFC>(`${this.basePath}/api/features-comparing/${encodeURIComponent(String(type))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * locations
     * 
     * @param offset 
     * @param paged 
     * @param pageNumber 
     * @param pageSize 
     * @param sortSorted 
     * @param sortUnsorted 
     * @param unpaged 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public locationsUsingGET3(offset?: number, paged?: boolean, pageNumber?: number, pageSize?: number, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, observe?: 'body', reportProgress?: boolean): Observable<PageLocationFC>;
    public locationsUsingGET3(offset?: number, paged?: boolean, pageNumber?: number, pageSize?: number, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageLocationFC>>;
    public locationsUsingGET3(offset?: number, paged?: boolean, pageNumber?: number, pageSize?: number, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageLocationFC>>;
    public locationsUsingGET3(offset?: number, paged?: boolean, pageNumber?: number, pageSize?: number, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (paged !== undefined && paged !== null) {
            queryParameters = queryParameters.set('paged', <any>paged);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sortSorted !== undefined && sortSorted !== null) {
            queryParameters = queryParameters.set('sort.sorted', <any>sortSorted);
        }
        if (sortUnsorted !== undefined && sortUnsorted !== null) {
            queryParameters = queryParameters.set('sort.unsorted', <any>sortUnsorted);
        }
        if (unpaged !== undefined && unpaged !== null) {
            queryParameters = queryParameters.set('unpaged', <any>unpaged);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageLocationFC>(`${this.basePath}/api/features-comparing`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * locations
     * 
     * @param type type
     * @param connectionTypes connectionTypes
     * @param govProgram govProgram
     * @param govProgramYear govProgramYear
     * @param locationName locationName
     * @param operators operators
     * @param parents parents
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public locationsUsingGET4(type: 'ATS' | 'INET' | 'INFOMAT' | 'MOBILE' | 'PAYPHONE' | 'POST' | 'RADIO' | 'TV', connectionTypes?: Array<number>, govProgram?: number, govProgramYear?: number, locationName?: string, operators?: Array<number>, parents?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<ByteArrayResource>;
    public locationsUsingGET4(type: 'ATS' | 'INET' | 'INFOMAT' | 'MOBILE' | 'PAYPHONE' | 'POST' | 'RADIO' | 'TV', connectionTypes?: Array<number>, govProgram?: number, govProgramYear?: number, locationName?: string, operators?: Array<number>, parents?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteArrayResource>>;
    public locationsUsingGET4(type: 'ATS' | 'INET' | 'INFOMAT' | 'MOBILE' | 'PAYPHONE' | 'POST' | 'RADIO' | 'TV', connectionTypes?: Array<number>, govProgram?: number, govProgramYear?: number, locationName?: string, operators?: Array<number>, parents?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteArrayResource>>;
    public locationsUsingGET4(type: 'ATS' | 'INET' | 'INFOMAT' | 'MOBILE' | 'PAYPHONE' | 'POST' | 'RADIO' | 'TV', connectionTypes?: Array<number>, govProgram?: number, govProgramYear?: number, locationName?: string, operators?: Array<number>, parents?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling locationsUsingGET4.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (connectionTypes) {
            connectionTypes.forEach((element) => {
                queryParameters = queryParameters.append('connectionTypes', <any>element);
            })
        }
        if (govProgram !== undefined && govProgram !== null) {
            queryParameters = queryParameters.set('govProgram', <any>govProgram);
        }
        if (govProgramYear !== undefined && govProgramYear !== null) {
            queryParameters = queryParameters.set('govProgramYear', <any>govProgramYear);
        }
        if (locationName !== undefined && locationName !== null) {
            queryParameters = queryParameters.set('locationName', <any>locationName);
        }
        if (operators) {
            operators.forEach((element) => {
                queryParameters = queryParameters.append('operators', <any>element);
            })
        }
        if (parents) {
            parents.forEach((element) => {
                queryParameters = queryParameters.append('parents', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ByteArrayResource>(`${this.basePath}/api/features-comparing/${encodeURIComponent(String(type))}/export-excel`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * makeItActive
     * 
     * @param featureId featureId
     * @param locationId locationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public makeItActiveUsingPOST(featureId: number, locationId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public makeItActiveUsingPOST(featureId: number, locationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public makeItActiveUsingPOST(featureId: number, locationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public makeItActiveUsingPOST(featureId: number, locationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (featureId === null || featureId === undefined) {
            throw new Error('Required parameter featureId was null or undefined when calling makeItActiveUsingPOST.');
        }

        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling makeItActiveUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/features-comparing/${encodeURIComponent(String(locationId))}/${encodeURIComponent(String(featureId))}/activation`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
