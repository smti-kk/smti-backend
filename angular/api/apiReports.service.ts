/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ByteArrayResource } from '../model/byteArrayResource';
import { PaginatedListReportAccessPointFullDTO } from '../model/paginatedListReportAccessPointFullDTO';
import { PaginatedListReportApContractDTO } from '../model/paginatedListReportApContractDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ApiReportsService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * exportMonitoringAccessPointData
     * 
     * @param end end
     * @param start start
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMonitoringAccessPointDataUsingGET(end?: number, start?: number, observe?: 'body', reportProgress?: boolean): Observable<ByteArrayResource>;
    public exportMonitoringAccessPointDataUsingGET(end?: number, start?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteArrayResource>>;
    public exportMonitoringAccessPointDataUsingGET(end?: number, start?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteArrayResource>>;
    public exportMonitoringAccessPointDataUsingGET(end?: number, start?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (end !== undefined && end !== null) {
            queryParameters = queryParameters.set('end', <any>end);
        }
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ByteArrayResource>(`${this.basePath}/api/report/organization/export/map/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * exportReportAll
     * 
     * @param ap ap
     * @param contractor contractor
     * @param gdp gdp
     * @param inet inet
     * @param location location
     * @param organization organization
     * @param parents parents
     * @param smo smo
     * @param sort sort
     * @param type type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportReportAllUsingGET(ap?: 'CONTRACT' | 'ESPD' | 'RSMO' | 'SMO' | 'ZSPD', contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, smo?: string, sort?: string, type?: string, observe?: 'body', reportProgress?: boolean): Observable<ByteArrayResource>;
    public exportReportAllUsingGET(ap?: 'CONTRACT' | 'ESPD' | 'RSMO' | 'SMO' | 'ZSPD', contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, smo?: string, sort?: string, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteArrayResource>>;
    public exportReportAllUsingGET(ap?: 'CONTRACT' | 'ESPD' | 'RSMO' | 'SMO' | 'ZSPD', contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, smo?: string, sort?: string, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteArrayResource>>;
    public exportReportAllUsingGET(ap?: 'CONTRACT' | 'ESPD' | 'RSMO' | 'SMO' | 'ZSPD', contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, smo?: string, sort?: string, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {











        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ap !== undefined && ap !== null) {
            queryParameters = queryParameters.set('ap', <any>ap);
        }
        if (contractor !== undefined && contractor !== null) {
            queryParameters = queryParameters.set('contractor', <any>contractor);
        }
        if (gdp !== undefined && gdp !== null) {
            queryParameters = queryParameters.set('gdp', <any>gdp);
        }
        if (inet !== undefined && inet !== null) {
            queryParameters = queryParameters.set('inet', <any>inet);
        }
        if (location !== undefined && location !== null) {
            queryParameters = queryParameters.set('location', <any>location);
        }
        if (organization !== undefined && organization !== null) {
            queryParameters = queryParameters.set('organization', <any>organization);
        }
        if (parents !== undefined && parents !== null) {
            queryParameters = queryParameters.set('parents', <any>parents);
        }
        if (smo !== undefined && smo !== null) {
            queryParameters = queryParameters.set('smo', <any>smo);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ByteArrayResource>(`${this.basePath}/api/report/organization/ap-all/export/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * exportReportContract
     * 
     * @param contract contract
     * @param contractEnd contract-end
     * @param contractStart contract-start
     * @param contractor contractor
     * @param gdp gdp
     * @param inet inet
     * @param location location
     * @param organization organization
     * @param parents parents
     * @param populationEnd population-end
     * @param populationStart population-start
     * @param smo smo
     * @param sort sort
     * @param type type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportReportContractUsingGET(contract?: string, contractEnd?: string, contractStart?: string, contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe?: 'body', reportProgress?: boolean): Observable<ByteArrayResource>;
    public exportReportContractUsingGET(contract?: string, contractEnd?: string, contractStart?: string, contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteArrayResource>>;
    public exportReportContractUsingGET(contract?: string, contractEnd?: string, contractStart?: string, contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteArrayResource>>;
    public exportReportContractUsingGET(contract?: string, contractEnd?: string, contractStart?: string, contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contract !== undefined && contract !== null) {
            queryParameters = queryParameters.set('contract', <any>contract);
        }
        if (contractEnd !== undefined && contractEnd !== null) {
            queryParameters = queryParameters.set('contract-end', <any>contractEnd);
        }
        if (contractStart !== undefined && contractStart !== null) {
            queryParameters = queryParameters.set('contract-start', <any>contractStart);
        }
        if (contractor !== undefined && contractor !== null) {
            queryParameters = queryParameters.set('contractor', <any>contractor);
        }
        if (gdp !== undefined && gdp !== null) {
            queryParameters = queryParameters.set('gdp', <any>gdp);
        }
        if (inet !== undefined && inet !== null) {
            queryParameters = queryParameters.set('inet', <any>inet);
        }
        if (location !== undefined && location !== null) {
            queryParameters = queryParameters.set('location', <any>location);
        }
        if (organization !== undefined && organization !== null) {
            queryParameters = queryParameters.set('organization', <any>organization);
        }
        if (parents !== undefined && parents !== null) {
            queryParameters = queryParameters.set('parents', <any>parents);
        }
        if (populationEnd !== undefined && populationEnd !== null) {
            queryParameters = queryParameters.set('population-end', <any>populationEnd);
        }
        if (populationStart !== undefined && populationStart !== null) {
            queryParameters = queryParameters.set('population-start', <any>populationStart);
        }
        if (smo !== undefined && smo !== null) {
            queryParameters = queryParameters.set('smo', <any>smo);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ByteArrayResource>(`${this.basePath}/api/report/organization/ap-contract/export/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * reportAll
     * 
     * @param page page
     * @param size size
     * @param ap ap
     * @param contractor contractor
     * @param gdp gdp
     * @param inet inet
     * @param location location
     * @param organization organization
     * @param parents parents
     * @param populationEnd population-end
     * @param populationStart population-start
     * @param smo smo
     * @param sort sort
     * @param type type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportAllUsingGET1(page: number, size: number, ap?: 'CONTRACT' | 'ESPD' | 'RSMO' | 'SMO' | 'ZSPD', contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginatedListReportAccessPointFullDTO>;
    public reportAllUsingGET1(page: number, size: number, ap?: 'CONTRACT' | 'ESPD' | 'RSMO' | 'SMO' | 'ZSPD', contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginatedListReportAccessPointFullDTO>>;
    public reportAllUsingGET1(page: number, size: number, ap?: 'CONTRACT' | 'ESPD' | 'RSMO' | 'SMO' | 'ZSPD', contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginatedListReportAccessPointFullDTO>>;
    public reportAllUsingGET1(page: number, size: number, ap?: 'CONTRACT' | 'ESPD' | 'RSMO' | 'SMO' | 'ZSPD', contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling reportAllUsingGET1.');
        }

        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling reportAllUsingGET1.');
        }













        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ap !== undefined && ap !== null) {
            queryParameters = queryParameters.set('ap', <any>ap);
        }
        if (contractor !== undefined && contractor !== null) {
            queryParameters = queryParameters.set('contractor', <any>contractor);
        }
        if (gdp !== undefined && gdp !== null) {
            queryParameters = queryParameters.set('gdp', <any>gdp);
        }
        if (inet !== undefined && inet !== null) {
            queryParameters = queryParameters.set('inet', <any>inet);
        }
        if (location !== undefined && location !== null) {
            queryParameters = queryParameters.set('location', <any>location);
        }
        if (organization !== undefined && organization !== null) {
            queryParameters = queryParameters.set('organization', <any>organization);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (parents !== undefined && parents !== null) {
            queryParameters = queryParameters.set('parents', <any>parents);
        }
        if (populationEnd !== undefined && populationEnd !== null) {
            queryParameters = queryParameters.set('population-end', <any>populationEnd);
        }
        if (populationStart !== undefined && populationStart !== null) {
            queryParameters = queryParameters.set('population-start', <any>populationStart);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (smo !== undefined && smo !== null) {
            queryParameters = queryParameters.set('smo', <any>smo);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PaginatedListReportAccessPointFullDTO>(`${this.basePath}/api/report/organization/ap-all/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * reportContracts
     * 
     * @param page page
     * @param size size
     * @param contract contract
     * @param contractEnd contract-end
     * @param contractStart contract-start
     * @param contractor contractor
     * @param gdp gdp
     * @param inet inet
     * @param location location
     * @param organization organization
     * @param parents parents
     * @param populationEnd population-end
     * @param populationStart population-start
     * @param smo smo
     * @param sort sort
     * @param type type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportContractsUsingGET(page: number, size: number, contract?: string, contractEnd?: string, contractStart?: string, contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginatedListReportApContractDTO>;
    public reportContractsUsingGET(page: number, size: number, contract?: string, contractEnd?: string, contractStart?: string, contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginatedListReportApContractDTO>>;
    public reportContractsUsingGET(page: number, size: number, contract?: string, contractEnd?: string, contractStart?: string, contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginatedListReportApContractDTO>>;
    public reportContractsUsingGET(page: number, size: number, contract?: string, contractEnd?: string, contractStart?: string, contractor?: string, gdp?: string, inet?: string, location?: string, organization?: string, parents?: string, populationEnd?: number, populationStart?: number, smo?: string, sort?: string, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling reportContractsUsingGET.');
        }

        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling reportContractsUsingGET.');
        }















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contract !== undefined && contract !== null) {
            queryParameters = queryParameters.set('contract', <any>contract);
        }
        if (contractEnd !== undefined && contractEnd !== null) {
            queryParameters = queryParameters.set('contract-end', <any>contractEnd);
        }
        if (contractStart !== undefined && contractStart !== null) {
            queryParameters = queryParameters.set('contract-start', <any>contractStart);
        }
        if (contractor !== undefined && contractor !== null) {
            queryParameters = queryParameters.set('contractor', <any>contractor);
        }
        if (gdp !== undefined && gdp !== null) {
            queryParameters = queryParameters.set('gdp', <any>gdp);
        }
        if (inet !== undefined && inet !== null) {
            queryParameters = queryParameters.set('inet', <any>inet);
        }
        if (location !== undefined && location !== null) {
            queryParameters = queryParameters.set('location', <any>location);
        }
        if (organization !== undefined && organization !== null) {
            queryParameters = queryParameters.set('organization', <any>organization);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (parents !== undefined && parents !== null) {
            queryParameters = queryParameters.set('parents', <any>parents);
        }
        if (populationEnd !== undefined && populationEnd !== null) {
            queryParameters = queryParameters.set('population-end', <any>populationEnd);
        }
        if (populationStart !== undefined && populationStart !== null) {
            queryParameters = queryParameters.set('population-start', <any>populationStart);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (smo !== undefined && smo !== null) {
            queryParameters = queryParameters.set('smo', <any>smo);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PaginatedListReportApContractDTO>(`${this.basePath}/api/report/organization/ap-contract/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
